<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="$this.Text" xml:space="preserve">
    <value>Aiuto</value>
  </data>
  <data name="bnOK.Text" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="rtbHelp.Text" xml:space="preserve">
    <value>L'applicazione EdgeManage è tutto su come gestire i tuoi preferiti di bordo. È stato progettato per affrontare molte delle caratteristiche mancanti nel nuovo browser Edge. Essa vi permetterà di:

   • Visualizza tutte le preferenze e le cartelle in un albero grafica
   • Utilizzare "drag and drop" per spostare preferiti e le cartelle in giro
   • Ordina tutti o parte dei tuoi preferiti
   • rinominare le cartelle / preferiti
   • Aggiungere manualmente / cancellare cartelle / preferiti
   • Modificare gli URL all'interno favoriti
   • preferiti Importa da un file bookmarks.html basata su HTML
   • preferiti Esporta in un file bookmarks.html basata su HTML
   • Importazione preferiti da Internet Explorer
   • Esportazione preferiti di Internet Explorer
   • Backup e ripristino del database Edge
   • Creazione di collegamenti Internet sul desktop
   • Resuscitare preferiti e cartelle eliminati in precedenza
   • Generare mancante icone preferite
   • sostituire un'icona esistente con una grafica a scelta
   • Spostare o eliminare più elementi in una sola volta tramite “checkbox multi-selezione”

sfondo

Il nuovo browser bordo è considerato da alcuni di non essere "feature complete". Per esempio, manca di un modo semplice per gestire preferiti (aka Segnalibri).

Le versioni moderne del browser bordo non memorizza preferiti come file il modo in cui si può essere abituati, e invece utilizza un database interno Extensible Storage Engine (ESE) per memorizzare preferiti. Quindi, questo significa che non è più possibile utilizzare il File Explorer per gestire i tuoi preferiti.

Il modo "nativo" per accedere ai preferiti è, naturalmente, per aprire Bordo, esporre i favoriti "pane", e utilizzare Edge per rinominare, eliminare, o riorganizzare le cartelle e favoriti. Tuttavia, questo molto noioso e prende un po 'di pratica. Inoltre, si potrebbe perdere su tutte le nuove funzionalità di cui sopra!

Guida dell'utente

Al primo avvio l'applicazione, caricherà automaticamente tutti i favoriti dal database bordo nella cache locale dell'applicazione. Da lì, è possibile apportare modifiche al sito nella cache locale dei dati. Dopo aver ottenuto le cose nel modo desiderato, quindi è possibile quindi salvare le modifiche al database Edge. Nota: Nulla è salvato nel database bordo fino a quando si fa clic su "Save to Edge"

Nota: È necessario chiudere il browser bordo prima di eseguire questa applicazione.

La schermata iniziale dovrebbe mostrare tutti i preferiti e le cartelle esistenti esattamente come appaiono in Edge. È quindi possibile solo "drag and drop" gli elementi per riorganizzare le cartelle e favoriti. È inoltre possibile utilizzare i menu dell'applicazione per inserire, rinominare, modificare, eliminare, importazione, esportazione, ordinare, ecc

È possibile utilizzare le funzioni di importazione HTML / esportazione HTML per copiare in modo efficace tutti i preferiti da un PC all'altro. Ciò in genere richiedono di esportare in un file di backup, copiare il file di backup per l'altro PC, e quindi importare dal file di backup

differenze comportamentali

La vera Microsoft Edge permetterà di avere più di una cartella o favorito con lo stesso nome. Tuttavia, non permetterà a qualsiasi preferito di condividere lo stesso URL in una cartella.

Il comportamento del EdgeManage è l'opposto virtuale di regole di cui sopra ... non permetterà cartella duplicata o nomi preferiti (all'interno della stessa cartella). E, non permette un favorito di condividere lo stesso URL in una cartella.

EdgeManage si offre una scelta sull'opportunità di avere i vostri preferiti importati vengono visualizzati in una cartella separata o da unire con la struttura delle cartelle esistente. Il default è di unirle.</value>
    <comment>many lines!
changed for v2.0.0</comment>
  </data>
</root>