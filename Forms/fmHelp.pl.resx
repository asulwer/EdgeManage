<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="$this.Text" xml:space="preserve">
    <value>Pomoc</value>
  </data>
  <data name="bnOK.Text" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="rtbHelp.Text" xml:space="preserve">
    <value>Aplikacja EdgeManage ułatwi Ci zarządzanie ulubionymi w przeglądarce Edge. Została tak zaprojektowana aby umożliwić Ci czynności których nie ma dostępnych w przeglądarce Edge. Przy użyciu EdgeManage będziesz mógł:

   • Przeglądać wszystkie ulubione i folder w formie drzewa
   • Używać funkcji “przeciągnij i upuść” do przenoszenia ulubionych i folderów
   • Sortować wszystkie lub część ulubionych
   • Zmieniać nazwy ulubionych i folderów
   • Ręcznie dodawać, usuwać ulubione i foldery
   • Edytować URLe wewnątrz ulubionych
   • Importować ulubione z plików HTML
   • Eksportować ulubione do plików HTML
   • Importować ulubione z Internet Explorera
   • Eksportować ulubione do Internet Explorera
   • Tworzyć kopie i odtwarzać zapasowe bazy danych Edge
   • Tworzyć skróty na pulpicie
   • Odzyskiwać usunięte ulubione i foldery
   • Generować brakujące ikony ulubionych
   • Zastępować ikony wybraną przez Ciebie grafiką
   • Przemieszczać lub usuwać zgrupowane element za pomocą “zaznacz pole wielokrotnego wyboru”

Opis

Przeglądarka Edge jest uważana przez niektórych jako nie w pełni funkcjonalna. Na przykład, brakuje łatwego sposobu zarządzania ulubionymi (zakładki).

Obecna wersja przeglądarki Edge już nie przechowuje ulubionych jako pliki, jak kiedyś, a zamiast tego wykorzystuje wewnętrzny Extensible Storage Engine (ESE) bazy danych do ich przechowywania. Oznacza to, że nie można już korzystać z Eksploratora plików, aby zarządzać ulubionymi.

Oczywiście dostęp do ulubionych w Edge można uzyskać otwierając przeglądarkę Edge wybierając okienko Ulubionych i użyć Edge do zarządzania folderami i ulubionymi. Jest to jednak bardzo uciążliwe i wymaga trochę praktyki. Oczywistym jest, że nie chcesz się wyzbyć dostępu do wszystkich powyżej wymienionych funkcji EdgeManage, których nie znajdziesz w Edge!

Przewodnik użytkownika

Podczas pierwszego uruchomienia, do pamięci podręcznej aplikacji zostaną załadowane wszystkie ulubione z bazy Edge. Wszystkie zmiany będą dokonywane w na danych przechowywanej w pamięci podręcznej aplikacji. Po dokonaniu odpowiednich zmian możesz je zapisać do bazy Edge. Uwaga: do momentu kliknięcia „Zapisz zmiany” nic nie jest zapisywane w bazie Edge

Uwaga: przed uruchomieniem EdgeManage należy zamknąć przeglądarkę Edge.

Ekran początkowy powinien pokazać wszystkie istniejące ulubione i foldery dokładnie tak, jak pojawiają się one w Edge. Następnie do reorganizacji ulubionych i folderów można po prostu użyć funkcji "przeciągnij i upuść". Można również skorzystać z menu aplikacji, aby wstawiać, zmieniać nazwy, edytować, usuwać, importować, eksportować, sortować, itd., ulubione i foldery

Używając funkcji importu i eksportu HTML, można przenieść całą bazę danych ulubionych przeglądarki Edge z jednego komputera do drugiego. Wystarczy tylko wyeksportować bazę do pliku backupu, skopiować go na inny komputer i zaimportować do Edge.

Różnice w działaniu

Microsoft Edge pozwala mieć więcej niż jeden folder lub ulubione o tej samej nazwie, ale nie pozwala przechowywać tego samego adresu URL w różnych ulubionych.

Zachowanie EdgeManage jest przeciwieństwem powyższych zasad ...aplikacja nie pozwoli na duplikowanie nazwy folderu lub ulubionych (w tym samym folderze),a to nie pozwala ulubionym dzielić ten sam adres URL

EdgeManager daje możliwość zaimportowania ulubionych jako osobny folder albo połączenie importu z istniejącą strukturą. Domyślnym ustawieniem jest łączenie.</value>
    <comment>many lines!
Changed in v2.0.0</comment>
  </data>
</root>